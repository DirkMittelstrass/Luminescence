NEWS for the R Package Luminescence

Changes in version 0.5.0 (, 2015):

  General remarks:

         • This major major update provides, apart from few new
           functions, many bugfixes and non-visible improvements in the
           underlying code to make the growing package still usable.
           The most important changes are provided by the support of
           generic S3-functions, e.g., the wellknown R function
           ‘plot()’ now knows how to deal with ‘RLum’-objects. However,
           this also went along with a more standardised way how RLum
           objects can be treated. For example: To access and object
           now it is enough to use only the function ‘get_RLum()’. The
           function will subsequently patch the right method on the
           basis of the object.

  Changes S4-objects, methods, classes:

         • Extend class definition for ‘RLum’-class by slots
           ‘originator’ and ‘.uid’ (and with that for all
           ‘RLum’classes),

         • ‘get_RLum’

             • the method for the ‘RLum.Results’ object returned ‘NULL’
               if nothing was defined for a specific function,
               corrected. Now, if nothing is defined the first object
               in the slot ‘data’ is returned (#223),

             • the method was enhanced to deal with objects of type
               ‘list’ containing only ‘RLum’ objects. Depending on the
               ‘RLum’ objects in the list the corresponding ‘get_RLum’
               methods are called,

             • argument ‘keep.object’ (for ‘RLum.Analysis’ objects) has
               been replace by ‘drop’. The default is ‘drop = TRUE’,
               this mean common behaviour changes as former it was
               ‘keep.object = TRUE’. However, ‘drop’ is behaviour
               consistent with standard R code,

             • argument ‘data.object’ (‘get_RLum’ for 'RLum.Results'
               objects can now handle numeric values)

         • ‘merge_RLum’

             • Method for ‘RLum.Results’ objects now combines the
               data.frame using the function ‘data.table::rbindList’
               this should give a little bit more speed,

             • the method was not working properely for objects of
               types ‘RLum.Results’ if they tried to combine matrices
               and vectors found in the 'data.object' list.

         • ‘Risoe.BINfileData-class’

             • Show method now returns the valid grain range,

             • the method ‘get_Risoe.BINfileData’ was never active, but
               the corresponding message on using the function
               ‘Risoe.BINfileData2RLum.Analysis()’ disappeared if a
               user tried to pass additional (unused) arguments.
               Corrected (thanks to Alice Versendaal).

         • RLum.Data.Curve

             • The corresponding ‘set_RLum’ method of this class now
               comes with default values, corresponding to the
               prototype of this class and the method itself does not
               check any longer for missing values, means, empty
               objects can be produced,

             • furthermore the ‘set_RLum’ method now accepts an
               ‘RLum.Data.Curve’ object as input for the argument
               ‘data’. With this the object can be changed (e.g.
               recordType) without de-constructing the object.

  New functions:

         • ‘calc_gSGC()’ Calculate De value based on the gSGC by Li et
           al., 2015,

         • ‘plot_NRt()’ Creates a Natural/Regenerated signal vs. time
           (NR(t)) plot as shown in Steffen et al. 2009,

         • ‘read_Daybreak2R()’ Imports ASCII data produced by a
           Daybreak TL/OSL reader,

         • ‘use_DRAC()’ Provides an R interface to the 'Dose Rate
           Calculator' (DRAC),

         • ‘template_DRAC()’ Creates a DRAC input template (v1.1) to be
           used for ‘use_DRAC()’,

         • ‘plot_ViolinPlot()’ Creates a combination of a kernel
           density plot with a boxplot.  This plot was especially
           written for visualisation of data where standard errors are
           zero or to small to be visualised at all.

  Bugfixes and changes:

         • ‘analyse_IRSAR.RF()’

             • Argument ‘fit.trace’ removed. It can be controlled by
               the new argument ‘method.control’ instead,

             • argument ‘slide.show_density’ removed and can now be
               controlled by within the new argument ‘method.control’,

             • argument ‘method.control’ added allowing to control
               parameters of the chosen method,

             • now also the sliding matrix is returned with the
               RLum.Results 'data.object' ‘slide’,

             • the way the error is calculated was changed again to
               account for drawbacks if always just the global minimum
               is chosen (details see manual),

             • adjust the threshold finding for the criterium
               'curve_bounds' to ensure that a warning message is
               shown, if results should not be used,

             • the 'curve_bounds' message will no longer be shown, if
               the natural curve was limited by the argument
               ‘RF_nat.lim’ and within the curve limits the bounds have
               not been reached,

             • fix a bug that forces the function to crash if a limited
               atural curve reached the end of the regenerated curve
               after sliding and remains longer (#254),

             • some graphical adjustments.

         • ‘analyse_SAR.CWOSL()’

             • Internal curve selection now works using the ‘get_RLum’.
               This should give a little bit more flexibility and
               prevent errors with odd curve names,

             • in the rare case where no recuperation rate can be
               calculated due to the missing R0 point the function
               stopped with an error. This has been corrected.

             • function now how to deal with a ‘list’ of
               ‘RLum.Analysis’ objects and will re-call itself as
               elements are in the ‘list’ (argument ‘object’). In
               particular cases this may lead to a tremendous efficient
               data analysis process,

             • add 'call' to data output object,

             • add 'UID' column to data object 'De.values' and
               'rejection.criteria',

             • if the function is not able to proceed to due to unequal
               number of OSL curves the analysis will no longer break
               with an error. Instead ‘NULL’ is returned. This allows
               to use the function more efficiently in a loop,

             • improve behaviour if wrong background integrals are
               provided, even the values make no sense the functions
               tries to do the best without breaking.

         • ‘analyse_SAR.TL()’

             • New argument ‘dose.points’ and its functionality added.

         • ‘calc_CentralDose()’

             • Fixed a bug in the ‘RLum.Results’ object, which returned
               false profile log-likelihood values for ‘sigma’. Report
               was gratefully provided by Eike F. Rades.

         • ‘calc_OSLLxTxRatio()’

             • The function produced nonsense if only Lx data are
               provided as RLum.Data.Curve object; corrected (raised by
               Andrea Junge).

         • ‘calc_SourceDoseRate()’

             • Function now returns the original function call as
               data.object,

             • argument ‘predict’ added to allow for source dose rate
               prediction in days,

             • adding plotting method for object output, available via
               (‘plot_RLum’),

             • extend examples.

         • ‘calc_Statistics()’

             • Weighted median is now completly removed from the
               calculation, values is replaced by the unweighted
               median.

         • ‘fit_LMCurve()’

             • Argument ‘output.plot’ renamed to ‘plot’,

             • argument ‘output.plotBG’ renamed to ‘plot.BG’,

             • arguemtn ‘output.terminal’ renamed to ‘verbose’,

             • argument ‘output.path’ removed without replacement,
               corresponding code has been removed from the function,

             • argument ‘cex.global’ removed, scaling can be still used
               via ‘cex’

             • argument ‘output.terminaladvanced’ has been removed
               without replacement, terminal output can just be
               triggered via ‘verbose’,

             • new argument added ‘fit.method’. Argument works similar
               as in ‘fit_CWCurve()’ and allows to use the
               Levenberg-Marquardt algorithm for fitting (addressing
               #55)

             • new return data object added ‘call’ containing the
               original function call.

         • ‘merge_RLum()’

             • The function now removes empty list objects before
               proceeding.

         • ‘merge_RisoeBINfileData()’

             • The position number of the merged BIN-files was not
               appropriately recalculated due to a coding error (#251).
               Report and fix was gratefully provided by Alice
               Versandaal.

         • ‘plot_AbanicoPlot()’

             • Further adjustment to deal with zero error values (will
               now be removed automatically),

             • if the De was zero or negative the function stopped with
               an error, changed to a warning message and a return of
               ‘NULL’ (this is a much better behaviour when the
               function is used within a loop, #253),

             • make sure that the graphical parameters are restored
               properly after the function was run.

         • ‘plot_DRTResults()’

             • Function struggled with RLum.Results objects as input;
               corrected.

             • improve graphical representation using groups of
               boxplots.

         • ‘plot_GrowthCurve()’

             • Final fitting and fitting during the MC runs is now done
               using the Levenberg-Marquardt from the package
               'minpack.lm'. This increases the fitting stability and
               the computation step markedly (#5),

             • output object is enhanced by the ‘call’ containing the
               function call,

             • for the option ‘fit.method = "LIN"’ and ‘fit.method =
               "EXP OR LIN"’ weights had been not considered;
               corrected,

             • add argument ‘fit.force_through_origin’, it does exactly
               what you may expect from such argument (#225, requested
               by Alice Versendaal),

             • get rid of some not very informative warning messages if
               some fitting failed and if start parameters are not set
               sufficiently,

             • add argument ‘txtProgressBar’ and ‘verbose’ to provide
               more output options (this is helpful when writing
               tutorials),

             • new fit options added ‘QDR’ (polynominal function) to
               account for superlinear signal grow,

             • improve fitting behaviour for modelled data, especially
               causing errors due to singular convergence failures,

             • add ‘De.MC’, the De values from the MC runs, to the
               output.

         • ‘plot_RLum()’

             • The ‘...’ argument ‘main’ can be now be of type ‘list’
               if a ‘list’ of objects is provided. This allows to set
               different plot titles for this specific plot option.

         • ‘plot_RLum.Analysis()’

             • The ‘...’ argument ‘main’ can now be provided as vector
               if ‘combine = TRUE’,

             • this methods now supports a vector for the argument
               ‘main’.

         • ‘readBIN2R()’

             • Set function on deprecated, new name: ‘read_BIN2R()’,

             • new argument ‘position’ implemented that allows to limit
               the import to specific positions (this will have,
               however, no positive effect on the import performance),

             • add argument ‘...’ to let arguments pass to the function
               ‘Risoe.BINfileData2RLum.Analysis’, this case the
               argument ‘fastForward’ will forced to ‘TRUE’,

             • argument ‘file’ now supports a ‘list’ of file names or
               just a path, in this case the funtions tries to detect
               and import all possible BIN/BINX files found in this
               path.

         • ‘readSPE2R()’

             • Set function on deprecated, new name: ‘read_SPE2R()’.

         • ‘readXSYG2R()’

             • Set function to deprecated, new name: ‘read_XSYG2R()’,

             • the argument ‘file’ can now handle a ‘list’ of files,
               along with this just a path to directory is allowed
               instead a path to a file.  In this case the function
               tries to import all XSYG-files that can be found in the
               directory,

             • the curves were not 'named' IRSL if laser diods instead
               of LEDs are facilitated in the lexsyg reader; fixed\

             • the element 'stimulator' and 'detecteur' appeared twice
               in the info element list after import, corrected.

         • ‘Risoe.BINfileData2RLum.Analysis()’

             • If the lower temperature for the TL curve calculation
               was not at 0, wrong shifted TL curves had been produced
               (this happens normally for BIN-files produced by FI
               lexsyg readers),

             • A new argument ‘grain’ can be used to further limit the
               transformation to specific grains in the data set,

             • the arguement ‘pos’ is no longer required. If nothing is
               provided every position will be transformed and the
               function returns a list of ‘RLum.Analysis’-objects,

             • along with this the argument ‘pos’ now accepts a vector
               as input (i.e., more than on position can be provided
               for the conversion),

             • new argument ‘txtProgressBar’ added. The default is set
               to ‘FALSE’ as the computation time just become relevant
               for single grain data,

             • an error was fixed that occurred if the curves used for
               the transformation had been of zero length.

         • ‘Seconds2Gray()’

             • Add new method for the error calculation ‘omit’ and set
               this method to 'default' to avoid biasing the
               De-distributions,

             • argument ‘method’ renamed to ‘error.propagation’.

         • ‘writeR2BIN()’

             • Set function to deprecated, new name: ‘write_R2BIN()’

  Internals:

         • Re-adding the package 'zoo' in imports,

         • Adding package 'readxl' to imports (used in ‘use_DRAC’ to
           import the XLS file)

         • Adding package 'httr' to imports (used in ‘use_DRAC’ to
           establish the connection)

         • This package is now linked to 'Rcpp' and 'RcppArmadillo'
           (used within the function ‘.analyse_IRSARRF_SRS)’,

         • Remove dependency to package 'assertive'

         • Added methods for S3 generics ‘`$`, `[<-`, `[[<-`, print,
           as.data.frame’ for objects of class ‘DRAC.list’

         • Added methods for S3 generics ‘print’ for objects of class
           ‘DRAC.highlights’

         • Roxygen2: replaced ‘@exportPattern ^[[:alpha:]]+’ with with
           explicit ‘@export’ statements to allow better NAMESPACE
           housekeeping,

         • Roxygen2: The documentation for ExampleData.DeValues was not
           produced automatically. Corrected.

         • Add methods for S3 generics for RLum-objects:

             • ‘`[`’ : ‘RLum.Data.Curve’, ‘RLum.Data.Spectrum’,
               ‘RLum.Data.Image’, ‘RLum.Analysis’

             • ‘`[[`’ : ‘RLum.Analysis’, ‘RLum.Results’

             • ‘`$`’ : ‘RLum.Results’

             • ‘`+`’ : ‘RLum.Data.Curve’

             • ‘`-`’ : ‘RLum.Data.Curve’

             • ‘`*`’ : ‘RLum.Data.Curve’

             • ‘`"\"`’ : ‘RLum.Data.Curve’

             • ‘plot()’ : ‘RLum.Data.Curve’, ‘RLum.Data.Image’,
               ‘RLum.Data.Image’, ‘RLum.Data.Spectrum’,
               ‘RLum.Analysis’, ‘RLum.Results’, ‘Risoe.BINfileData’

             • ‘hist()’: ‘RLum.Results’, ‘RLum.Data.Image’,
               ‘RLum.Data.Curve’, ‘RLum.Analysis’

             • ‘summary()’: ‘RLum.Results’, ‘RLum.Data.Image’,
               ‘RLum.Data.Curve’, ‘RLum.Analysis’

             • ‘length()’: ‘RLum.Data.Curve’, ‘RLum.Analysis’,
               ‘Risoe.BINfileData’

             • ‘as.data.frame()’: ‘RLum.Data.Curve’, ‘RLum.Results’

             • ‘as.list()’: ‘RLum.Data.Curve’, ‘RLum.Results’

             • ‘as.matrix()’: ‘RLum.Data.Curve’, ‘RLum.Results’

             • ‘merge()’: ‘RLum’

